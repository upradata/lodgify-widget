import type { Moment } from 'moment';
import type { DateRange } from '@root/util.types';


export type ReactDatesDateRangePickerProps = {
    startDate?: Moment;
    endDate?: Moment;
    onDatesChange: (dates: DateRange<Moment>) => void;
    focusedInput?: 'startDate' | 'endDate' | null;
    onFocusChange: (focusedInput: 'startDate' | 'endDate' | null) => void;
    onClose?: Function;
    // input related props
    startDateId: string;
    startDatePlaceholderText?: string;
    startDateOffset?: Function;
    endDateOffset?: Function;
    endDateId: string;
    endDatePlaceholderText?: string;
    startDateAriaLabel?: string;
    endDateAriaLabel?: string;
    disabled?: boolean | 'startDate' | 'endDate';
    required?: boolean;
    readOnly?: boolean;
    screenReaderInputMessage?: string;
    showClearDates?: boolean;
    showDefaultInputIcon?: boolean;
    inputIconPosition?: 'before' | 'after';
    customInputIcon?: React.ReactNode;
    customArrowIcon?: React.ReactNode;
    customCloseIcon?: React.ReactNode;
    noBorder?: boolean;
    block?: boolean;
    small?: boolean;
    regular?: boolean;
    keepFocusOnInput?: boolean;
    // calendar presentation and interaction related props
    renderMonthText?: Function | 'renderMonthText' | 'renderMonthElement';
    renderMonthElement?: Function | 'renderMonthText' | 'renderMonthElement';
    renderWeekHeaderElement?: Function;
    orientation?: 'horizontal' | 'vertical';
    anchorDirection?: 'left' | 'right';
    openDirection?: 'down' | 'up';
    horizontalMargin?: number;
    withPortal?: boolean;
    withFullScreenPortal?: boolean;
    appendToBody?: boolean;
    disableScroll?: boolean;
    daySize?: number;
    isRTL?: boolean;
    firstDayOfWeek?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
    initialVisibleMonth?: Function;
    numberOfMonths?: number;
    keepOpenOnDateSelect?: boolean;
    reopenPickerOnClearDates?: boolean;
    renderCalendarInfo?: Function;
    calendarInfoPosition?: 'top' | 'bottom' | 'before' | 'after';
    hideKeyboardShortcutsPanel?: boolean;
    verticalHeight?: number;
    transitionDuration?: number;
    verticalSpacing?: number;
    horizontalMonthPadding?: number;
    // navigation related props
    dayPickerNavigationInlineStyles?: object;
    navPosition?: 'navPositionBottom' | 'navPositionTop';
    navPrev?: React.ReactNode;
    navNext?: React.ReactNode;
    renderNavPrevButton?: Function;
    renderNavNextButton?: Function;
    onPrevMonthClick?: Function;
    onNextMonthClick?: Function;
    // day presentation and interaction related props
    renderCalendarDay?: Function;
    renderDayContents?: Function;
    minimumNights?: number;
    minDate?: Moment;
    maxDate?: Moment;
    enableOutsideDays?: boolean;
    isDayBlocked?: Function;
    isOutsideRange?: Function;
    isDayHighlighted?: Function;
    // internationalization props
    displayFormat?: string | Function;
    monthFormat?: string;
    weekDayFormat?: string;
    phrases?: Record<keyof Phrases, string | Function | React.ReactNode>;
    dayAriaLabelFormat?: string;
};


type Phrases = {
    calendarLabel: string;
    roleDescription: string;
    closeDatePicker: string;
    clearDates: string;
    focusStartDate: string;
    jumpToPrevMonth: string;
    jumpToNextMonth: string;
    keyboardShortcuts: string;
    showKeyboardShortcutsPanel: string;
    hideKeyboardShortcutsPanel: string;
    openThisPanel: string;
    enterKey: string;
    leftArrowRightArrow: string;
    upArrowDownArrow: string;
    pageUpPageDown: string;
    homeEnd: string;
    escape: string;
    questionMark: string;
    selectFocusedDate: string;
    moveFocusByOneDay: string;
    moveFocusByOneWeek: string;
    moveFocusByOneMonth: string;
    moveFocustoStartAndEndOfWeek: string;
    returnFocusToInput: string;
    keyboardForwardNavigationInstructions: string;
    keyboardBackwardNavigationInstructions: string;
    chooseAvailableStartDate: Function;
    chooseAvailableEndDate: Function;
    dateIsUnavailable: Function;
    dateIsSelected: Function;
    dateIsSelectedAsStartDate: Function;
    dateIsSelectedAsEndDate: Function;
};
